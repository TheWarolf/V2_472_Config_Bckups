
#####################################################################
#     Macros
#####################################################################

#####################################################################
#      Utilities macros
#####################################################################
# Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
# Used in conjunction with Marlin's linear advance calibration tool: 
# https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
	# Parameters
	{% set pa = params.K|float %}
	
	SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro OVEREXTRUDE_FOR_HILBERT]
gcode:
    {% set top_pattern = params.TOP_PATTERN %}
    {% set bot_pattern = params.BOT_PATTERN %}
    {% set role = params.ROLE %}
    {% set z = params.ACTUAL_Z|int %}
    {% set flow_top = params.FLOW_TOP|int %}
    {% set flow_bot = params.FLOW_BOT|int %}

    {% if top_pattern == "hilbertcurve" %}
        {% if role == "TopSolidInfill" %}
            M221 S{flow_top}
        {% else %}
            M221 S100
        {% endif %}
    {% endif %}
    
    {% if bot_pattern == "hilbertcurve" %}
        {% if z == 1 %}
            {% if role == "SolidInfill" %}
                M221 S{flow_bot}
            {% else %}
                M221 S100
            {% endif %}
        {% endif %}
    {% endif %}



#    Redefine M204 gcode to properly accel_to_decel when called instead of keeping default through the print
[gcode_macro M204]
rename_existing: M204.1
gcode:
  {% if 'S' in params %}{% set accel = params.S %}{% endif %}
  {% set old_accel = printer["gcode_macro SET_PROPER_ACCEL"].actual_accel|float%}
  
  {% if accel|int < 7100 %} # not a travel
    SET_VELOCITY_LIMIT ACCEL={ old_accel } ACCEL_TO_DECEL={ old_accel|float * 0.75} SQUARE_CORNER_VELOCITY=8
  {%else%} # actually a travel
    SET_VELOCITY_LIMIT ACCEL={ accel } ACCEL_TO_DECEL={ accel|float * 0.75} SQUARE_CORNER_VELOCITY=8
  {%endif%}

# macro ausiliaria per settare dinamicamente accelerazioni
[gcode_macro SET_MY_ACCEL] 
gcode:
    {% set accel = params.A|default(5000)|float %}
    SET_VELOCITY_LIMIT ACCEL={ accel } ACCEL_TO_DECEL={ accel|float * 0.75} SQUARE_CORNER_VELOCITY=8

[gcode_macro SET_PROPER_ACCEL]
variable_actual_accel: 555
gcode:
    {% set role = params.ROLE %}
    
    {% if role =="ExternalPerimeter" %}
        SET_MY_ACCEL A=1000
        SET_GCODE_VARIABLE MACRO=SET_PROPER_ACCEL VARIABLE=actual_accel VALUE=1000
    {%elif role=="Perimeter"%}
        SET_MY_ACCEL A=2500
        SET_GCODE_VARIABLE MACRO=SET_PROPER_ACCEL VARIABLE=actual_accel VALUE=2500
    {%elif role=="OverhangPerimeter"%}
        SET_MY_ACCEL A=2500
        SET_GCODE_VARIABLE MACRO=SET_PROPER_ACCEL VARIABLE=actual_accel VALUE=2500
    {%elif role=="InternalInfill"%}
        SET_MY_ACCEL A=7000
        SET_GCODE_VARIABLE MACRO=SET_PROPER_ACCEL VARIABLE=actual_accel VALUE=7000
    {%elif role=="TopSolidInfill"%}
        SET_MY_ACCEL A=2500
        SET_GCODE_VARIABLE MACRO=SET_PROPER_ACCEL VARIABLE=actual_accel VALUE=2500
    {%elif role=="SolidInfill"%}
        SET_MY_ACCEL A=4000
        SET_GCODE_VARIABLE MACRO=SET_PROPER_ACCEL VARIABLE=actual_accel VALUE=4000
    {%elif role=="BridgeInfill"%}
        SET_MY_ACCEL A=5000
        SET_GCODE_VARIABLE MACRO=SET_PROPER_ACCEL VARIABLE=actual_accel VALUE=5000
    {%elif role=="GapFill"%}
        SET_MY_ACCEL A=2500
        SET_GCODE_VARIABLE MACRO=SET_PROPER_ACCEL VARIABLE=actual_accel VALUE=2500
    {%elif role=="Skirt"%}
        SET_MY_ACCEL A=7000
        SET_GCODE_VARIABLE MACRO=SET_PROPER_ACCEL VARIABLE=actual_accel VALUE=7000
    {%elif role=="SupportMaterial"%}
        SET_MY_ACCEL A=7000
        SET_GCODE_VARIABLE MACRO=SET_PROPER_ACCEL VARIABLE=actual_accel VALUE=7000
    {%elif role=="SupportMaterialInterface"%}
        SET_MY_ACCEL A=5000
        SET_GCODE_VARIABLE MACRO=SET_PROPER_ACCEL VARIABLE=actual_accel VALUE=5000
    {%elif role=="ThinWall"%}
        SET_MY_ACCEL A=2000
        SET_GCODE_VARIABLE MACRO=SET_PROPER_ACCEL VARIABLE=actual_accel VALUE=2000
    {%else%}
        SET_MY_ACCEL A=4444
        SET_GCODE_VARIABLE MACRO=SET_PROPER_ACCEL VARIABLE=actual_accel VALUE=4444
    {% endif %}



#####################################################################
#      QOL macros
#####################################################################

[gcode_macro MY_SETLEDS]
# macro to change color to 12864 lcd V1.2 (no neopixel)
# params are RED, GREEN, BLUE
gcode:
    {% set red = params.RED|default(0)|float %}
    {% set green = params.RED|default(0)|float %}
    {% set blue = params.RED|default(0)|float %}

    SET_PIN PIN=ledRed VALUE={red}
    SET_PIN PIN=ledGreen VALUE={green}
    SET_PIN PIN=ledBlue VALUE={blue}

[gcode_macro START_HEATUP_PLA]
#manual heating phase for PLA
gcode:
    {% set bed = params.BED|default(55)|float %}

    G28
    G0 X150 Y150 Z20
    M106  S200       # high part fan for ducts and unifrom heat
    M109 S190        # no ooze temp
    M190 S{bed}

[gcode_macro START_HEATUP_PETG]
#manual heating phase for PETG
gcode:
    {% set bed = params.BED|default(75)|float %}

    G28
    G0 X150 Y150 Z20
    SET_FAN_SPEED FAN=nevermore SPEED=0.5
    M106  S200       # high part fan for ducts and unifrom heat
    M109 S190        # no ooze temp
    M190 S{bed}

[gcode_macro START_HEATUP_ABS]
#manual heating phase for ABS
gcode:
    {% set bed = params.BED|default(100)|float %}

    G28
    G0 X150 Y150 Z20
    SET_FAN_SPEED FAN=nevermore SPEED=0.75
    M106  S200       # high part fan for ducts and unifrom heat
    M109 S190        # no ooze temp
    M190 S{bed}

[gcode_macro NOZZLE_BRUSH_NEW]
# macro to brush nozzle (silicon)
gcode:
    G90
    G0 Z15 F300
    G1 X150 Y297 F18000
  
    {% for wipes in range(0,3) %}
        {% for i in range(0,50,4) %}
            G0 X{51 + i} Y297 Z9.5 F10000
            G0 X{53 + i} Y299 Z9.5 F10000
        {% endfor %}  
        {% for i in range(0,50,4) %}
            G0 X{101 - i} Y297 Z9.5 F10000
            G0 X{99 - i} Y299 Z9.5 F10000
        {% endfor %}
        G1 X51 Y298 Z9.9 F10000
        G1 X101 Y298 Z9.9 F10000
        G1 X51 Y298 Z9.9 F10000
    {% endfor %}
    G1 X150 Y297 F18000

[gcode_macro MMU_START_PURGE]
#macro to perform a start purge
gcode:
    ERCF_HOME
    G90
    G1 Z30 F600
    G1 X25 Y298 F10000
    #CHANGE_TOOL_SUSIE TOOL={params.FIRST_EXTRUDER|int}
    ERCF_CHANGE_TOOL TOOL={params.FIRST_EXTRUDER|int}
    G1 E180 F300    
    G1 E-2 F300
    NOZZLE_BRUSH_NEW
	
[gcode_macro MMU_END_PURGE]
#macro to perform a start purge
gcode:

    G91
    G1 z10 F600
    G90
    G1 X25 Y298 F10000
    #UT_RAMMING
    ERCF_EJECT


[gcode_macro PURGE_LINE]
gcode:
    G90                                 # use absolute coordinates
    G1 X100 Y3 F6000.0                  # go outside print area
    G0 Z0.2 F300
    G1 E2 F1000                         # de-retract and push ooze
    
    ### purge line####

    G1 X120 E4  F1000.0                 #fat 20mm intro line @ 0.30
    G1 X160 E3.2  F1000.0               #thin +40mm intro line @ 0.08
    G1 X190 E6  F1000.0                 #fat +40mm intro line @ 0.15
    G1 E-1 F2100                        #retract to avoid stringing
    G1 X189.5 E0 F1000.0                #-0.5mm wipe action to avoid string
    G1 X200 E0 F1000.0                  #10mm intro line @ 0.00
    G1 E-0.5 F1500                      #de-retract

    M83
    G92 E0


#####################################################################
#      Macros to be called in print_start/print_end
#####################################################################

[delayed_gcode bed_off]
gcode:
    TURN_OFF_HEATERS
    SET_FAN_SPEED FAN=nevermore SPEED=0

[delayed_gcode partfan_off]
gcode:
    M107


#####################################################################
#      Conditional homing macros
#####################################################################

[gcode_macro CG28XY]
#conditional homing on X and Y
gcode:
   {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes %}
        G28 X Y
   {% endif %}

#####################################################################
#      PAUSE/RESUME/CANEL macros
#####################################################################

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    {% set x_park = params.XPARK|default(25)|float %}
    {% set y_park = params.YPARK|default(298)|float %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 5.0) %}
        {% set z_safe = 5.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    G92 E0
    G1 E-1.0 F1500.0
    G90
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 Z{z_safe} F900
    G90
    G0 X{x_park} Y{y_park} F6000
    
    #{% set xparkabs = params.XPARK|default(25)|float %}
    #{% set yparkabs = params.YPARK|default(298)|float %}
    #{% set z = params.ZREL|default(10)|float %}

    # {% if printer['pause_resume'].is_paused|int == 0 %}	
        
        # SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}									    						; set z hop variable for reference in resume macro
		# SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}	
        # SAVE_GCODE_STATE NAME=PAUSE	
        
        # BASE_PAUSE																											; pause print
		# {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}										; check that zhop doesn't exceed z max
			# G91																												; relative positioning
			# G1 Z{z} F900																									; raise Z up by z hop amount
		# {% else %}
			# { action_respond_info("Pause zhop exceeds maximum Z height.") }													; if z max is exceeded, show message and set zhop value for resume to 0
			# SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
		# {% endif %}
		# G90																													; absolute positioning
		# G1 X{xparkabs} Y{yparkabs} F10000
        # #G91
        # G1 E{-1} F300        
		# SAVE_GCODE_STATE NAME=PAUSEPARK																						; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)	
		# #M104 S0																												; turn off hotend
		# SET_IDLE_TIMEOUT TIMEOUT=43200	
        
        # SET_PIN PIN=contaore VALUE=0
        # #SAVE_GCODE_STATE NAME=PAUSE_state
        # #G91
        # #G1 Z{zrel} F2100
        # #G1 E{-1} F300
        # #G90
        # #G1 X{xparkabs} Y{yparkabs} F10000
        # #
        # #BASE_PAUSE
    # {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    {% if printer["gcode_macro ERCF_PAUSE"].is_paused|int != 0 %}
        M118 You can't resume the print without unlocking the ERCF first.
        M118 Run ERCF_UNLOCK and solve any issue before hitting Resume again
    {% else %}
        RESTORE_GCODE_STATE NAME=PAUSE_state
        G90
        {% if printer["gcode_macro ERCF_VAR"].clog_detection|int == 1 %}
            SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
        {% endif %}
        BASE_RESUME
    {% endif %}



	# # Parameters
	# {% set e = params.E|default(2.5)|int %}																				; nozzle prime amount
	
	# #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1																	; enable filament sensor
	# #RESETRGB																											; reset LCD color
	# SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}											; set timeout back to configured value
	# #{% if etemp > 0 %}
	# #	M109 S{etemp|int}																								; wait for hotend to heat back up
	# #{% endif %}
    # G90
	# RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=300															; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)	
	# G91																													; relative positioning
	# M83																													; relative extruder positioning
	# #{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}												
	# #	G1 Z{zhop * -1} E{e} F900																						; prime nozzle by E, lower Z back down
	# #{% else %}						
	# #	G1 Z{zhop * -1} F900																							; lower Z back down	without priming (just in case we are testing the macro with cold hotend)
	# #{% endif %}	
    # G90							
	# RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=300	
    # G90
    # SET_PIN PIN=contaore VALUE=1															; restore position
	# BASE_RESUME	



[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    {% set zrel = params.ZREL|default(5)|float %}

    M104 S0
    M140 S0
    M141 S0
    M106 S0
    G91
    G1 Z{zrel}
    G90
    SET_PIN PIN=contaore VALUE=0
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
    G28 X Y


#####################################################################
#      START/END macros
#####################################################################

[gcode_macro PRINT_START]
gcode:
    {% set bed_temp = params.BED_TEMP|default(50)|float %}
    {% set extruder_temp = params.EXTRUDER_TEMP|default(190)|float %}
    {% set chamber_setpoint = params.CHAMBER_SETPOINT|default(0)|float %}           #temperature to wait in chamber, set from slicer
    {% set nextextruder = params.NEXTEXTRUDER|default(-1)|int %}                    #check if it's a MM print
    {% set bedmesh = params.BEDMESH|default(0)|int %}                               # check if it's needed to do bedmesh
    {% set wait = params.WAIT|default(1)|int %} 
    {% set swapcounter = params.COUNTER|default(0)|int  %} 
    {% set material = params.MATERIAL|default("ABS") %} 
    
    #{% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %}    # dato per autobemesh

    UPDATE_DELAYED_GCODE ID=bed_off DURATION=0 
    UPDATE_DELAYED_GCODE ID=partfan_off DURATION=0

    G28
    M106 S200
    M140 S{bed_temp}                            #start bed heating
    G90                                         #absolute coord
    G0 X150 Y150 Z20                            #positoning
    SET_FAN_SPEED FAN=nevermore SPEED=0.75      #activating the filter
    M109 S190                                   #heating to no ooze temp  
    M83                                         #set relative extrusion
    G1 E-1 F2100                                #retract a bit to limit ooze  
    M190 S{bed_temp}                            #heating and waiting bed 
    
    SET_PRESSURE_ADVANCE ADVANCE=0              #disable PA (to be set in slicer)
    SET_GCODE_OFFSET Z=0.0                      #zero eventual offset
    BED_MESH_CLEAR                              #remove old bedmesh

    {% if wait == 1 %} 
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chamber_setpoint} #wait for chamber temp to come up to desired setpoint
    {% endif %}
    
    QUAD_GANTRY_LEVEL DETACH=0                  #do a QGL, (check probe setup)

    {% if bedmesh == 1 %}                        #perform a bedmesh if requested (check probe setup)
        #ADAPTIVE_BED_MESH SIZE={FL_SIZE} DETACH=0
        BED_MESH_CALIBRATE DETACH=0
    {% endif %}

    NOZZLE_BRUSH_NEW                            #brush the nozzle
    CALIBRATE_Z DETACH=0                        #perform a z offset calibration as per https://github.com/protoloft/klipper_z_calibration
    #DETACH_PROBE
    DOCK_PROBE_MASTER

    G0 X150 Y150 Z20 F18000
    M109 S{extruder_temp}

    {% if not nextextruder == -1 %}
        MMU_START_PURGE FIRST_EXTRUDER={nextextruder}
    {% endif %}

    {% if material == "PLA" %}
        SET_GCODE_OFFSET Z_ADJUST=-0.05 MOVE=1
    {% endif %}

    M107
    PURGE_LINE

    G21 
    G90 
    M83 

    MY_SETLEDS RED=1 GREEN=1 BLUE=1
    SET_PIN PIN=contaore VALUE=1
    


[gcode_macro PRINT_END]
gcode:

    {% set unload = params.UNLOAD|default(1)|int %}

    M400                            # wait for buffer to clear
    M83                           
    G1 E-5.0 F3600                  # retract filament
    G91                             # relative positioning
    #G0 Z1.00 X20.0 Y20.0 F20000     # move nozzle to remove stringing
    G28 X Y                         # park nozzle at rear
    
    {% if unload == 1 %}            # unload filament with default ramming (optional)
        ERCF_FORM_TIP_STANDALONE
        G1 E-4.00 F1200.0
        G1 E-15.00 F2000
    {% endif %}
    
    M109 S0                         # turn off just the hotend
    M221 S100                       #reset flow to 100

    UPDATE_DELAYED_GCODE ID=partfan_off DURATION=120
    UPDATE_DELAYED_GCODE ID=bed_off DURATION=600

    G1 Z10 F3000                    ; move nozzle up 10mm
    G90                            ; absolute positioning
    G21 
    G90 
    M83
    
    MY_SETLEDS RED=1 GREEN=1 BLUE=1
    SET_PIN PIN=contaore VALUE=0
